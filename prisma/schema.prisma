// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Enable if you're using Prisma Migrate
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token         String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(MEMBER)
  language      String    @default("en")
  
  accounts      Account[]
  sessions      Session[]
  
  rooms         RoomMember[]
  meals         Meal[]
  payments      Payment[]
  shoppingItems ShoppingItem[]
  votes         Vote[]
  notifications Notification[]
  bkashPayments BkashPayment[]
  marketDates   MarketDate[]
  extraExpenses ExtraExpense[]
  guestMeals    GuestMeal[]


  @@index([email])
  @@index([role, isActive])
  @@index([createdAt, updatedAt])
  @@index([emailVerified, isActive])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
}

model Room {
  id          String      @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isActive    Boolean     @default(true)
  fineAmount  Float       @default(0)
  fineEnabled Boolean     @default(false)
  
  @@index([isActive])
  @@index([createdAt])
  @@unique([name])
  
  members     RoomMember[]
  meals       Meal[]
  payments    Payment[]
  shopping    ShoppingItem[]
  votes       Vote[]
  bkashPayments BkashPayment[]
  marketDates MarketDate[]
  extraExpenses ExtraExpense[]
  guestMeals  GuestMeal[]
}

model RoomMember {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  joinedAt  DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roomId])
  @@index([roomId, role]) 
  @@index([joinedAt]) 
}

model Meal {
  id        String   @id @default(cuid())
  date      DateTime
  type      MealType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roomId, date, type])
  @@index([roomId, date]) 
  @@index([userId, date]) 
  @@index([type, date]) 
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  CUSTOM
}

model GuestMeal {
  id        String   @id @default(cuid())
  date      DateTime
  type      MealType
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@index([roomId, date]) 
  @@index([userId, date]) 
}

model ShoppingItem {
  id          String   @id @default(cuid())
  description String
  amount      Float
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  receiptUrl  String?
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@index([roomId, date]) 
  @@index([amount]) 
  @@index([userId, date]) 
}

model Payment {
  id          String        @id @default(cuid())
  amount      Float
  date        DateTime
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  roomId      String
  room        Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  bkashPayment BkashPayment?
  
  @@index([roomId, status, date]) 
  @@index([userId, status, date]) 
  @@index([method, status]) 
}

enum PaymentMethod {
  BKASH
  CASH
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Vote {
  id        String   @id @default(cuid())
  type      VoteType
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  candidateId String?
  
  @@unique([userId, roomId, type])
  @@index([roomId, type, candidateId]) 
  @@index([createdAt]) 
}

enum VoteType {
  MANAGER_ELECTION
  MEAL_PREFERENCE
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, read]) 
  @@index([createdAt]) 
}

enum NotificationType {
  MEAL_REMINDER
  PAYMENT_DUE
  VOTE_STARTED
  VOTE_ENDED
  MANAGER_CHANGED
  SHOPPING_ADDED
  MARKET_DATE_REMINDER
  FINE_APPLIED
  GUEST_MEAL_ADDED
  CUSTOM
}

model BkashPayment {
  id              String   @id @default(cuid())
  paymentId       String   @unique
  invoiceId       String
  amount          Float
  status          String
  trxId           String?
  customerMsisdn  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  roomId          String
  room            Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  paymentRecordId String   @unique
  paymentRecord   Payment  @relation(fields: [paymentRecordId], references: [id], onDelete: Cascade)
}

model MarketDate {
  id        String   @id @default(cuid())
  date      DateTime
  completed Boolean  @default(false)
  fined     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model ExtraExpense {
  id          String        @id @default(cuid())
  description String
  amount      Float
  date        DateTime
  type        ExpenseType
  receiptUrl  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  roomId      String
  room        Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

enum ExpenseType {
  UTILITY
  RENT
  INTERNET
  CLEANING
  MAINTENANCE
  OTHER
}
